(per_religion

	(wordsets)

	(entitylabels (AGENT1))

	(toplevel

		<!-- 7 {1}  {0}&[slot=1, word=muslim, lang=english] -->
		(regex (id per_religion_or_origin_ere_15) (score 0.9) (score_group 1) (re (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "muslim")))))) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200000)) (entitylabel AGENT1) (acetype PER))))

		<!-- 4 {1}  {0}&[slot=1, word=christian, lang=english] -->
		(regex (id per_religion_or_origin_ere_93) (score 0.9) (score_group 1) (re (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "christian")))))) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200001)) (entitylabel AGENT1) (acetype PER))))

		<!-- 2 copula:were[<obj> = 1][<sub> = pronoun:they[<ref> = 0]]&[slot=1, word=muslims, lang=english] -->
		(anyprop (id per_religion_or_origin_ere_467) (score 0.9) (score_group 1) (predicate were) (args (argument (role <obj>) (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "muslims"))))))) (argument (role <sub>) (anyprop (predicate they) (args (argument (role <ref>) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200002)) (entitylabel AGENT1) (acetype PER))))))))

		<!-- 2 {0} of {1}&[slot=1, word=muslim, lang=english] -->
		(regex (id per_religion_or_origin_ere_522) (score 0.9) (score_group 1) (re (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200003)) (entitylabel AGENT1) (acetype PER)) (text DONT_ADD_SPACES (string "of")) (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "muslim"))))))))

		<!-- 2 noun:minority[<mod> = noun:jewish[<ref> = 1]][<ref> = 0] -->
		(nprop (id per_religion_or_origin_ere_692) (score 0.9) (score_group 1) (predicate minority) (args (argument (role <mod>) (nprop (predicate jewish) (args (argument (role <ref>) (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC)))))) (argument (role <ref>) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200004)) (entitylabel AGENT1) (acetype PER)))))

		<!-- 2 {0} part of the {1}&monk , is {0}&{1} religion -->
		(regex (id per_religion_or_origin_ere_347) (score 0.9) (score_group 1) (re (text DONT_ADD_SPACES (string "monk")) (text DONT_ADD_SPACES (string ",")) (text DONT_ADD_SPACES (string "is")) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200005)) (entitylabel AGENT1) (acetype PER)) (text DONT_ADD_SPACES (string "part")) (text DONT_ADD_SPACES (string "of")) (text DONT_ADD_SPACES (string "the")) (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC)) (text DONT_ADD_SPACES (string "religion"))))

		<!-- 2 copula:were[<obj> = 1][<sub> = 0]&[slot=0, word=they, lang=english]&[slot=1, word=muslims, lang=english] -->
		(anyprop (id per_religion_or_origin_ere_409) (score 0.9) (score_group 1) (predicate were) (args (argument (role <obj>) (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "muslims"))))))) (argument (role <sub>) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200006)) (entitylabel AGENT1) (acetype PER) (regex (regex (re (text DONT_ADD_SPACES (string "they")))))))))

		<!-- 2 {1}  {0}&[slot=1, word=islamist, lang=english] -->
		(regex (id per_religion_or_origin_ere_341) (score 0.9) (score_group 1) (re (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "islamist")))))) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200007)) (entitylabel AGENT1) (acetype PER))))

		<!-- 2 noun:democrats[<mod> = noun:christian[<ref> = 1]][<ref> = 0] -->
		(nprop (id per_religion_or_origin_ere_547) (score 0.9) (score_group 1) (predicate democrats) (args (argument (role <mod>) (nprop (predicate christian) (args (argument (role <ref>) (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC)))))) (argument (role <ref>) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200008)) (entitylabel AGENT1) (acetype PER)))))

		<!-- 1 {1}  {0}&[slot=0, word=majority, lang=english]&[slot=1, word=muslim, lang=english] -->
		(regex (id per_religion_or_origin_ere_1415) (score 0.9) (score_group 1) (re (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "muslim")))))) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200009)) (entitylabel AGENT1) (acetype PER) (regex (regex (re (text DONT_ADD_SPACES (string "majority"))))))))

		<!-- 1 copula:is[<obj> = noun:minister[<mod> = 1][<ref> = 0]]&[slot=1, word=baptist, lang=english] -->
		(anyprop (id per_religion_or_origin_ere_2111) (score 0.9) (score_group 1) (predicate is) (args (argument (role <obj>) (nprop (predicate minister) (args (argument (role <mod>) (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "baptist"))))))) (argument (role <ref>) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200010)) (entitylabel AGENT1) (acetype PER))))))))

		<!-- 1 {1}  {0}&Clearly stated various {1}&{0} IN Bangladesh -->
		(regex (id per_religion_or_origin_ere_1035) (score 0.9) (score_group 1) (re (text DONT_ADD_SPACES (string "Clearly")) (text DONT_ADD_SPACES (string "stated")) (text DONT_ADD_SPACES (string "various")) (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC)) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200011)) (entitylabel AGENT1) (acetype PER)) (text DONT_ADD_SPACES (string "IN")) (text DONT_ADD_SPACES (string "Bangladesh"))))

		<!-- 1 {1}  {0}&[slot=0, word=militants, lang=english]&[slot=1, word=islamist, lang=english] -->
		(regex (id per_religion_or_origin_ere_1343) (score 0.9) (score_group 1) (re (mention (return (ff_role per_religion_or_origin)) (block AGENT1) (acetype PER GPE LOC) (regex (regex (re (text DONT_ADD_SPACES (string "islamist")))))) (mention (return (ff_role AGENT1) (ff_fact_type per_religion_or_origin_ere_200012)) (entitylabel AGENT1) (acetype PER) (regex (regex (re (text DONT_ADD_SPACES (string "militants"))))))))
	)
)
