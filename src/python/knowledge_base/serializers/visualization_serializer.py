import re
import json
import os
import sys
import string
import uuid
import operator
import rdflib
from rdflib import Graph, ConjunctiveGraph, Literal, BNode, Namespace, RDF, URIRef, XSD, RDFS
from rdflib.namespace import DC, FOAF
import copy
import pprint
import time
from datetime import datetime
from datetime import date
from datetime import timedelta
from calendar import monthrange
from time_matcher import TimeMatcher
import uuid
from elements.kb_mention import KBMention
from elements.kb_value_mention import KBValueMention, KBTimeValueMention, KBMoneyValueMention
from json_encoder import ComplexEncoder
import json, codecs

import pickle

reload(sys)
sys.setdefaultencoding('utf8')

class VisualizationSerializer:
    good_date_re = re.compile(r"\d{4}")
    
    def __init__(self):
        self.eventgroup2eventgroupid = {}
        self.eventgroupid2eventgroup = {}

        self.event2eventid = {}
        self.eventid2event = {}

        self.entity2entityid = {}
        self.entityid2entity = {}

        self.relations_eventgroup2eventgroup = set()
        self.relations_eventgroup2event = set()
        self.relations_event2entity = set()

        pass

    def serialize(self, kb, output_graph_file):
        self.kb = kb

        for relation_group_id, kb_relation_group in self.kb.relgroupid_to_kb_relation_group.iteritems():
            # skip relation groups that are added by kb constructor
            # we only process relation groups generated by kb_unification_resolver
            if "RelationUnified" in relation_group_id:
                continue

            left_event_group_id = kb_relation_group.left_argument_id
            right_event_group_id = kb_relation_group.right_argument_id

            # print "relation_group_id="+kb_relation_group.id
            # print "left_event_group_id="+left_event_group_id
            # print "right_event_group_id=" + right_event_group_id

            left_event_group = kb.evgroupid_to_kb_event_group[left_event_group_id]
            right_event_group = kb.evgroupid_to_kb_event_group[right_event_group_id]

            self.add_event_group(left_event_group.id, left_event_group_id)
            self.add_event_group(right_event_group.id, right_event_group_id)

            relation_type = kb_relation_group.relation_type

            self.relations_eventgroup2eventgroup.add((left_event_group_id, relation_type, right_event_group_id))

            for kb_event in left_event_group.members:
                kb_event_mention = kb_event.event_mentions[0]
                event_trigger = kb_event_mention.trigger
                if kb_event_mention.triggering_phrase is not None:
                    event_trigger = kb_event_mention.triggering_phrase
                    # print "graph: event_trigger\t" + kb_event_mention.trigger + "\t" + kb_event_mention.triggering_phrase
                event_id = self.add_event_default(event_trigger)
                self.relations_eventgroup2event.add((left_event_group_id, "unifies", event_id))
                self.add_event_arguments(kb_event_mention, event_id)
            for kb_event in right_event_group.members:
                kb_event_mention = kb_event.event_mentions[0]
                event_trigger = kb_event_mention.trigger
                if kb_event_mention.triggering_phrase is not None:
                    event_trigger = kb_event_mention.triggering_phrase
                    # print "graph: event_trigger\t" + kb_event_mention.trigger + "\t" + kb_event_mention.triggering_phrase
                event_id = self.add_event_default(event_trigger)
                self.relations_eventgroup2event.add((right_event_group_id, "unifies", event_id))
                self.add_event_arguments(kb_event_mention, event_id)

        self.write_graph(output_graph_file)

        return

    def add_event_group(self, event_group, event_group_id):
        self.eventgroup2eventgroupid[event_group] = event_group_id
        self.eventgroupid2eventgroup[event_group_id] = event_group

    def add_event_default(self, event):
        if event in self.event2eventid:
            return self.event2eventid[event]
        else:
            self.event2eventid[event] = "EVENT" + str(len(self.event2eventid))
            self.eventid2event[self.event2eventid[event]] = event

            return self.event2eventid[event]

    def add_event(self, event, eventid):
        self.event2eventid[event] = eventid
        self.eventid2event[eventid] = event

    def add_entity_default(self, entity):
        if entity in self.entity2entityid:
            return self.entity2entityid[entity]
        else:
            self.entity2entityid[entity] = "ENTITY" + str(len(self.entity2entityid))
            self.entityid2entity[self.entity2entityid[entity]] = entity

            return self.entity2entityid[entity]

    def add_entity(self, entity, entityid):
        self.entity2entityid[entity] = entityid
        self.entityid2entity[entityid] = entity

    def add_event_arguments(self, kb_event_mention, event_id):
        for kb_arg_role in kb_event_mention.arguments:
            args_for_role = kb_event_mention.arguments[kb_arg_role]
            if type(args_for_role[0]) == list:
                args_for_role = args_for_role[0]
            for kb_argument in args_for_role:
                # get argument mention text
                if isinstance(kb_argument, KBTimeValueMention):

                    relation_type = kb_arg_role.encode('utf-8')
                    arg_entity_str = kb_argument.normalized_date

                    if arg_entity_str is None:
                        continue
                    if not VisualizationSerializer.good_date_re.match(arg_entity_str):
                        continue
                    
                    entity_id = self.add_entity_default(arg_entity_str)
                    self.relations_event2entity.add((event_id, relation_type, entity_id))
                else:
                    if isinstance(kb_argument, KBMention):
                        mention_text = kb_argument.mention_text
                    else:
                        mention_text = kb_argument.value_mention_text

                    if kb_argument in self.kb.kb_mention_to_entid:
                        arg_entity_id = self.kb.entid_to_kb_entity[self.kb.kb_mention_to_entid[kb_argument]]

                        for entity_type_info_key in arg_entity_id.entity_type_to_confidence.keys():
                            entity_type_info = entity_type_info_key.split(".")
                            entity_type = entity_type_info[0]
                            entity_subtype = entity_type_info[1]
                            if arg_entity_id.canonical_name is not None and kb_event_mention.trigger is not None:
                                relation_type = kb_arg_role.encode('utf-8')
                                arg_entity_str = arg_entity_id.canonical_name.encode('utf-8').strip()

                                entity_id = self.add_entity_default(arg_entity_str)
                                self.relations_event2entity.add((event_id, relation_type, entity_id))

    def write_graph(self, output_graph_file):
        nodes = []
        edges = []
        for id,eventgroup in self.eventgroupid2eventgroup.items():
            nodes.append({'data':{'id':id,'name':eventgroup},'classes':"eventgroup"})
        for id,event in self.eventid2event.items():
            nodes.append({'data':{'id':id,'name':event},'classes':"event"})
        for id,entity in self.entityid2entity.items():
            nodes.append({'data':{'id':id,'name':entity},'classes':"entity"})

        for i in self.relations_eventgroup2eventgroup:
            edges.append({'data':{'source':i[0],'target':i[2],'name':i[1]},'classes':'eventgroup2eventgroup '+ i[1]})
        for i in self.relations_eventgroup2event:
            edges.append({'data':{'source':i[0],'target':i[2],'name':i[1]},'classes':i[1]})
        for i in self.relations_event2entity:
            edges.append({'data':{'source':i[0],'target':i[2],'name':i[1]},'classes':'event2entity '+ i[1]})
        with open(output_graph_file,'w') as fp:
            json.dump({'elements': {"nodes": nodes, "edges": edges}},fp, sort_keys=True, indent=4)
